// fox32os routine definitions for Jackal

#ASM [
// fox32os routine definitions

// system jump table
get_os_version:            jmp [0x00000810]
get_os_api_version:        jmp [0x00000814]
get_current_disk_id:       jmp [0x00000818]
set_current_disk_id:       jmp [0x0000081C]
get_boot_disk_id:          jmp [0x00000820]

// FXF jump table
parse_fxf_binary:          jmp [0x00000910]
launch_fxf_from_disk:      jmp [0x00000914]
launch_fxf_from_open_file: jmp [0x00000918]

// task jump table
new_task:                  jmp [0x00000A10]
yield_task:                jmp [0x00000A14]
end_current_task:          jmp [0x00000A18]
get_current_task_id:       jmp [0x00000A1C]
get_unused_task_id:        jmp [0x00000A20]
is_task_id_used:           jmp [0x00000A24]
save_state_and_yield_task: jmp [0x00000A28]
sleep_task:                jmp [0x00000A2C]

// memory jump table
allocate_memory:           jmp [0x00000B10]
free_memory:               jmp [0x00000B14]
heap_usage:                jmp [0x00000B18]

// window jump table
new_window:                jmp [0x00000C10]
destroy_window:            jmp [0x00000C14]
new_window_event:          jmp [0x00000C18]
get_next_window_event:     jmp [0x00000C1C]
draw_title_bar_to_window:  jmp [0x00000C20]
move_window:               jmp [0x00000C24]
fill_window:               jmp [0x00000C28]
get_window_overlay_number: jmp [0x00000C2C]
start_dragging_window:     jmp [0x00000C30]
new_messagebox:            jmp [0x00000C34]
get_active_window_struct:  jmp [0x00000C38]
set_window_flags:          jmp [0x00000C3C]

// VFS jump table
open:                      jmp [0x00000D10]
seek:                      jmp [0x00000D14]
tell:                      jmp [0x00000D18]
read:                      jmp [0x00000D1C]
write:                     jmp [0x00000D20]
get_size:                  jmp [0x00000D24]
create:                    jmp [0x00000D28]
delete:                    jmp [0x00000D2C]
copy:                      jmp [0x00000D30]

// widget jump table
draw_widgets_to_window:    jmp [0x00000E10]
handle_widget_click:       jmp [0x00000E14]
handle_widget_key_down:    jmp [0x00000E18]
handle_widget_key_up:      jmp [0x00000E1C]

// resource jump table
get_resource:              jmp [0x00000F10]

// implementations

GetCurrentDiskId:
.global GetCurrentDiskId
    call get_current_disk_id
    mov a3, r0
    ret

LaunchFxfFromDisk:
.global LaunchFxfFromDisk
    mov r0, a0
    mov r1, a1
    mov r2, a2
    mov r3, a3
    mov r4, [rsp+4]
    mov r5, [rsp+8]
    mov r6, [rsp+12]
    call launch_fxf_from_disk
    mov a3, r0
    ret

YieldTask:
.global YieldTask
    push s0
    push s1
    push s2
    push s3
    push s4
    push s5
    push s6
    push s7
    push s8
    push s9
    push s10
    push s11
    push s12
    push s13
    push s14
    push s15
    push s16
    push s17
    call yield_task
    pop s17
    pop s16
    pop s15
    pop s14
    pop s13
    pop s12
    pop s11
    pop s10
    pop s9
    pop s8
    pop s7
    pop s6
    pop s5
    pop s4
    pop s3
    pop s2
    pop s1
    pop s0
    ret

EndCurrentTask:
.global EndCurrentTask
    call end_current_task



AllocateMemory:
.global AllocateMemory
    mov r0, a0
    call allocate_memory
    mov a3, r0
    ret

FreeMemory:
.global FreeMemory
    mov r0, a0
    jmp free_memory

HeapUsage:
.global HeapUsage
    call heap_usage
    mov a3, r0
    ret



NewWindow:
.global NewWindow
    mov r0, a0
    mov r1, a1
    mov r2, a2
    mov r3, a3
    mov r4, [rsp+4]
    mov r5, [rsp+8]
    mov r6, [rsp+12]
    mov r7, [rsp+16]
    jmp new_window

DestroyWindow:
.global DestroyWindow
    mov r0, a0
    jmp destroy_window

GetNextWindowEvent:
.global GetNextWindowEvent
    mov r0, a0
    call get_next_window_event
    mov [r8], r0
    mov [r8+4], r1
    mov [r8+8], r2
    mov [r8+12], r3
    // TODO: do r4-r7 even tho no event uses them
    ret

FillWindow:
.global FillWindow
    // we switched argument order
    mov r0, a1
    mov r1, a0
    jmp fill_window

StartDraggingWindow:
.global StartDraggingWindow
    mov r0, a0
    jmp start_dragging_window

DrawWidgetsToWindow:
.global DrawWidgetsToWindow
    mov r0, a0
    jmp draw_widgets_to_window

HandleWidgetClick:
.global HandleWidgetClick
    mov r0, a0
    mov r1, a1
    mov r2, a2
    jmp handle_widget_click

HandleWidgetKeyDown:
.global HandleWidgetKeyDown
    mov r0, a0
    mov r1, a1
    jmp handle_widget_key_down

HandleWidgetKeyUp:
.global HandleWidgetKeyUp
    mov r0, a0
    mov r1, a1
    jmp handle_widget_key_up



Open:
.global Open
    mov r0, a0
    mov r1, a1
    mov r2, a2
    call open
    mov a3, r0
    ret

Read:
.global Read
    // we switched argument order
    mov r0, a2
    mov r1, a0
    mov r2, a1
    jmp read

Write:
.global Write
    // we switched argument order
    mov r0, a2
    mov r1, a0
    mov r2, a1
    jmp write

GetSize:
.global GetSize
    mov r0, a0
    call get_size
    mov a3, r0
    ret

Create:
.global Create
    mov r0, a0
    mov r1, a1
    mov r2, a2
    mov r3, a3
    call create
    mov a3, r0
    ret
]

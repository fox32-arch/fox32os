// generic vector implementation originally by OliveIsAWord (https://github.com/OliveIsAWord/hjkl/blob/main/src/vec.hjk)

EXTERN FN Assert (
    IN condition : UBYTE,
    IN label : ^UBYTE,
    IN arg1 : UWORD,
    IN arg2 : UWORD,
)

// Given an inner type, generate a vector type and methods.
#MACRO VecOf (
    T,
    VecT,
    VecTWithCapacity,
    VecTNull,
    VecTFree,
    VecTGrow,
    VecTReserveOne,
    VecTReserveAt,
    VecTRemove,
) [

// A vector, i.e. a growable array.
STRUCT VecT
    Elems : ^T, // pointer to array of elements
    Length : UWORD, // number of elements in the list
    Capacity : UWORD, // allocation size in elements
END

// Construct and initialize a vector that can hold at least `cap` elements without reallocating.
FN VecTWithCapacity (
    IN cap : UWORD,
    IN vec : ^VecT,
)
    vec^.Length = 0
    vec^.Capacity = cap
    IF cap == 0 THEN
        vec^.Elems = NULLPTR
    ELSE
        bytes := cap * SIZEOF T
        ptr := AllocateMemory(bytes)
        Assert(CAST ptr TO UWORD, "out of memory", cap, bytes)
        vec^.Elems = ptr
    END
END

// Construct an empty vector.
FN VecTNull (
    IN vec : ^VecT,
)
    VecTWithCapacity(0, vec)
END

// Free a vector.
FN VecTFree (
    IN self : ^VecT,
)
    IF self^.Elems THEN
        FreeMemory(self^.Elems)
    END
END

// Assure the vector has the capacity to store a given number of total elements.
FN VecTGrow (
    IN self : ^VecT,
    IN necessary_capacity : UWORD,
)
    IF self^.Capacity >= necessary_capacity THEN
        LEAVE
    END
    new_vec : VecT
    new_capacity := self^.Capacity / 2 * 3 + 8
    IF new_capacity < necessary_capacity THEN
        new_capacity = necessary_capacity
    END
    VecTWithCapacity(new_capacity, &new_vec)
    IF self^.Length THEN
        CopyMemoryBytes(self^.Elems, new_vec.Elems, self^.Length * SIZEOF T)
    END
    VecTFree(self)
    self^.Capacity = new_vec.Capacity
    self^.Elems = new_vec.Elems
END

// Insert a new element at the end of the vector, returning a pointer to the uninitialized element.
FN VecTReserveOne (
    IN self : ^VecT,
) : ^T
    VecTGrow(self, self^.Length + 1)
    self^.Length += 1
    RETURN &self^.Elems[self^.Length - 1]
END

// Insert `additional` new elements in the vector at position `index`, such that the new elements have indices [index, index + additional).
FN VecTReserveAt (
    IN self : ^VecT,
    IN index : UWORD,
    IN additional : UWORD,
) : ^T
    new_length := self^.Length + additional
    VecTGrow(self, new_length)
    i := self^.Length
    WHILE i >= index + 1 DO
        i -= 1
        CopyMemoryBytes(&self^.Elems[i], &self^.Elems[i + additional], SIZEOF T)
    END
    self^.Length = new_length
    RETURN &self^.Elems[index]
END

// TODO docs
FN VecTRemove (
    IN self : ^VecT,
    IN index : UWORD,
)
    self^.Length -= 1
    WHILE index < self^.Length DO
        CopyMemoryBytes(&self^.Elems[index + 1], &self^.Elems[index], SIZEOF T)
        index += 1
    END
END
]

// added by ry: used to declare an extern vector type
#MACRO ExternVecOf (
    ExternT,
    ExternVecT,
    ExternVecTWithCapacity,
    ExternVecTNull,
    ExternVecTFree,
    ExternVecTGrow,
    ExternVecTReserveOne,
    ExternVecTReserveAt,
    ExternVecTRemove,
) [

// A vector, i.e. a growable array.
STRUCT ExternVecT
    Elems : ^ExternT, // pointer to array of elements
    Length : UWORD, // number of elements in the list
    Capacity : UWORD, // allocation size in elements
END

// Construct and initialize a vector that can hold at least `cap` elements without reallocating.
EXTERN FN ExternVecTWithCapacity (
    IN cap : UWORD,
    IN vec : ^ExternVecT,
)

// Construct an empty vector.
EXTERN FN ExternVecTNull (
    IN vec : ^ExternVecT,
)

// Free a vector.
EXTERN FN ExternVecTFree (
    IN self : ^ExternVecT,
)

// Assure the vector has the capacity to store a given number of total elements.
EXTERN FN ExternVecTGrow (
    IN self : ^ExternVecT,
    IN necessary_capacity : UWORD,
)

// Insert a new element at the end of the vector, returning a pointer to the uninitialized element.
EXTERN FN ExternVecTReserveOne (
    IN self : ^ExternVecT,
) : ^ExternT

// Insert `additional` new elements in the vector at position `index`, such that the new elements have indices [index, index + additional).
EXTERN FN ExternVecTReserveAt (
    IN self : ^ExternVecT,
    IN index : UWORD,
    IN additional : UWORD,
) : ^ExternT

// TODO docs
EXTERN FN ExternVecTRemove (
    IN self : ^ExternVecT,
    IN index : UWORD,
)
]

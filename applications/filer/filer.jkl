#ASM [
    pop a0 // stream_local
    pop a1 // arg0
    call Main
    call EndCurrentTask
]

#DEFINE BLD_BITS 32
#DEFINE ARCHITECTURE "fox32"
#INCLUDE "sys/rtl.hjk"
#INCLUDE "sys/os.hjk"

#INCLUDE "window.hjk"
#INCLUDE "desktop.hjk"

text_stream : ^File = NULLPTR
PUBLIC windows : ^IconWindow[MAX_WINDOWS]

icons_file : File
PUBLIC icons_graphics : ^UBYTE = NULLPTR

EXTERN FN GetTick() : ULONG
#ASM [
GetTick:
.global GetTick
    in a3, 0x80000706
    ret
]

FN (RtlPrintCallbackF) RtljPrintCallback(
    IN byte : UBYTE,
    IN context : ^VOID,
)
    IF text_stream != 0 THEN
        buffer : UBYTE[1]
        buffer[0] = byte
        Write(text_stream, &buffer[0], 1)
    END
END
FN RtljLockStream(IN handle : ^VOID) : UWORD
    // dummy function to keep the compiler happy
END
FN RtljUnlockStream(
    IN handle : ^VOID,
    IN lockcontext : UWORD,
)
    // dummy function to keep the compiler happy
END

FN Exit()
    w := 0
    WHILE w < MAX_WINDOWS DO
        IF windows[w] != NULLPTR THEN
            CloseWindow(w)
        END
        w += 1
    END
    IF icons_graphics != NULLPTR THEN
        FreeMemory(icons_graphics)
    END
    EndCurrentTask()
END

FN Error(IN error_string : ^UBYTE)
    RtlPrint(error_string)
    RtlPrint("\n")
    Exit()
END

FN Initialize(
    IN stream_local : ^File,
)
    text_stream = stream_local

    // load icons into memory if the resource file exists
    IF Open("/system/icons.res", GetBootDiskId(), &icons_file) THEN
        icons_file_size := GetSize(&icons_file)
        icons_graphics = AllocateMemory(icons_file_size)
        Read(&icons_file, icons_graphics, icons_file_size)
    END
END

FN HandleMouseClick(
    IN windowNumber : UWORD,
    IN x : UINT,
    IN y : UINT,
)
    IF y < 16 THEN
        // user clicked title bar
        IF x < 8 THEN
            // user clicked close button
            CloseWindow(windowNumber)
            LEAVE
        END

        // otherwise, start dragging the window
        StartDraggingWindow(&windows[windowNumber]^.Window)
        LEAVE
    END

    IF windows[windowNumber]^.IsDesktopWindow THEN
        // desktop window should be refreshed when clicked
        old_num_icons := windows[windowNumber]^.NumIcons
        RefreshDesktopFiles(windowNumber)
        IF windows[windowNumber]^.NumIcons != old_num_icons THEN
            RenderDesktop(windowNumber)
        END
    END

    HandleWidgetClick(&windows[windowNumber]^.Window, x, y)
END

FN HandleButtonClick(
    IN windowNumber : UWORD,
    IN buttonId : UWORD,
)
    IF windows[windowNumber]^.ClickIcon == buttonId THEN
        // the last-clicked icon was this one
        // check if too much time has passed
        IF windows[windowNumber]^.ClickTimeMax < GetTick() THEN
            // too much time passed, reset the timer and return
            windows[windowNumber]^.ClickTimeMax = GetTick() + DOUBLE_CLICK_TICKS
            LEAVE
        END
        // otherwise, reset the time and icon and continue
        windows[windowNumber]^.ClickTimeMax = 0
        windows[windowNumber]^.ClickIcon = 0xFF
    ELSE
        // a new button was just clicked, set up the timer and return
        windows[windowNumber]^.ClickTimeMax = GetTick() + DOUBLE_CLICK_TICKS
        windows[windowNumber]^.ClickIcon = buttonId
        RenderWindow(windowNumber, FALSE)
        LEAVE
    END

    IF windows[windowNumber]^.Icon[buttonId].IsDisk THEN
        diskPath : UBYTE[4]
        RtlFormat(&diskPath[0], 4, "%d:/", windows[windowNumber]^.Icon[buttonId].DiskId)
        OpenWindow(&diskPath[0])
    ELSE
        // build up the new path string
        // there is probably a much better way to do this
        nameLen := StringLength(&windows[windowNumber]^.Icon[buttonId].Name[0])
        pathLen := StringLength(&windows[windowNumber]^.Path[0])
        concatPath : UBYTE[256]
        separator : UBYTE[2]
        IF windows[windowNumber]^.Path[pathLen - 1] == '/' THEN
            separator[0] = 0
        ELSE
            separator[0] = '/'
            separator[1] = 0
        END
        RtlFormat(&concatPath[0], 256, "%s%s%s",
            &windows[windowNumber]^.Path[0],
            &separator[0],
            &windows[windowNumber]^.Icon[buttonId].Name[0]
        )
        IF CompareString(&windows[windowNumber]^.Icon[buttonId].Name[nameLen - 3], "dir") THEN
            OpenWindow(&concatPath[0])
        ELSE
            LaunchFxfFromDisk(&concatPath[0], windows[windowNumber]^.Disk, 0, 0, 0, 0, 0)
        END
    END
END

FN Main(
    IN stream_local : ^File,
    IN arg0 : ^UBYTE,
)
    Initialize(stream_local)
    running := TRUE

    IF arg0 != NULLPTR AND CompareString(arg0, "desktop") THEN
        OpenDesktop()
    ELSEIF arg0 != NULLPTR AND arg0[1] == ':' THEN
        OpenWindow(arg0)
    ELSE
        RtlPrint("filer - fox32os file manager\nusage: filer <dir path>\n")
    END

    WHILE running == TRUE DO
        w := 0
        openWindows := 0
        WHILE w < MAX_WINDOWS DO
            IF windows[w] == NULLPTR THEN w += 1 CONTINUE END
            openWindows += 1
            e : Event
            GetNextWindowEvent(&windows[w]^.Window, &e)
            IF e.Type == EVENT_TYPE_MOUSE_CLICK THEN
                HandleMouseClick(w, e.Body.Pos.X, e.Body.Pos.Y)
            ELSEIF e.Type == EVENT_TYPE_BUTTON_CLICK THEN
                HandleButtonClick(w, e.Body.Parameters[0])
            END
            YieldTask()
            w += 1
        END
        IF openWindows == 0 THEN
            running = FALSE
        END
    END

    Exit()
END
